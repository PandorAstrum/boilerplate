' Class Diagram
' Description - It describes the static structure of a system

' Relation between classes symbols
' ----------------------------
' |     Type    |   Symbol   |
' |-------------|------------|
' | Extension   |   <|--     |
' | Composition |   *--      |
' | Aggregation |   o--      |
' |             |   #--      |
' |             |   x--      |
' | Dependancy  |   }--      |
' | Inheritance |   ^--      |
' |             |   +--      |
' | Association |   --       |
' ----------------------------
' replace -- by .. to have a dotted line
' can be used in two side. e.g: <--*

' Defining visibility
' -------------------------------------
' |     Visibility    |   Character   |
' |-------------------|---------------|
' |     private       |       -       |
' |     protected     |       #       |
' | package private   |       ~       |
' |     public        |       +       |
' -------------------------------------

' class inner seperator
' --------------------------------------
' |       Type       |      Symbol     |
' |------------------|-----------------|
' |    dotted line   |  ..something..  |
' |    single line   |  __something__  |
' |    dashed line   |  --something--  |
' |    double line   |  ==something==  |
' --------------------------------------

' Seperations
' -------------------------------------
' |     Seperators    |     Symbol    |
' |-------------------|---------------|
' |      noraml       |      --       |
' |     protected     |      ==       |
' | package private   |      ..       |
' |     public        |      __       |
' -------------------------------------

' relation line can have annotaion with
' class2 "1" *-- "many" class1 : contains

' Notes
' 1. note top of Object : In java, every class\nextends this one.
' note "This is a floating note" as N1
' note "This note is connected\nto several objects." as N2
' Object .. N2
' N2 .. ArrayList
'class Foo
'note left: On last defined class

@startuml
' Style area

' Icons area

' Skip Parameteres here
' Header Title area

' class definition
class Dummy1 {
    {static} id : Integer
    .. variables ..
    {field} +_varibale1 : Float
    {field} -_variable2 : Date
    {field} #_variable3 : String
    .. list ..
    Object[] elementData
    ==
    {abstract} abstract_method()
    __ class methods __
    {method} +methods1()
    {method} -methods2()
    {method} #methods3()
}

class Dummy2 <<abstract>> {
    {static} id : Integer
    .. variables ..
    {field} +_varibale1 : Float
    {field} -_variable2 : Date
    {field} #_variable3 : String
    .. list ..
    Object[] elementData
    ==
    {abstract} abstract_method()
    __ class methods __
    {method} +methods1()
    {method} -methods2()
    {method} #methods3()
}
Class1 #-- Class2
Class3 x-- Class4
Class5 }-- Class6
Class7 +-- Class8
Class9 ^-- Class10
Class11 *-- Class12
Class13 o-- Class14
' connection and relations

@enduml